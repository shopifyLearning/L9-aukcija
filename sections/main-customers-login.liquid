<section class="login-section">
  <div class="login-container">  <!-- New container for centering -->
  
      {% form 'recover_customer_password' %}
      {{ form.errors | default_errors }}

      <div class="recover-form">
        <div class="email">
          <label for="email">Email</label>
          <input type="email" name="email">
        </div>

        <div class="submit">
          <input type="submit" value="Submit" class="btn">
        </div>
        <div>
          <a href="{{ routes.account_login_url }}">Return to login page</a>
        </div>
      </div>
    {% endform %}

    {% form 'customer_login' %}
      {{ form.errors | default_errors }}

      <div class="login-form">
        <div class="email">
          <input
            placeholder="email"
            type="email"
            name="customer[email]">
        </div>

        <div class="password">
          <input
            type="password"
            name="customer[password]"
            placeholder="password">
        </div>

        <div class="remember-me">
          <input type="checkbox" id="remember-me" name="remember_me">
          <label for="remember-me">Remember me</label>
        </div>

        <a id="recover-password" href="#recover">
          Forgot your password?
        </a>

        <div class="submit">
          <input type="submit" value="Login" class="btn">
        </div>

        <a href="/pages/register">Create account</a>
      </div>
    {% endform %}
  </div>  <!-- End of login-container -->
  
  <style>
    .login-section {
        display: flex;  /* Use flexbox for the section to allow centering */
        justify-content: center; /* Center horizontally */
        align-items: center; /* Center vertically */
        height: 70vh; /* Full viewport height */
    }

    .login-form,
    .recover-form {
      width: 100%; /* Full width of the container */
      margin-bottom: 20px; /* Space between forms */
    }

    .email,
    .password {
      display: flex;
      flex-direction: column;
      margin-bottom: 15px; /* Space below input fields */
    }

    input[type="email"],
    input[type="password"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 100%; /* Full width for input fields */
      box-sizing: border-box; /* Include padding and border in element's total width */
    }

    .btn {
      padding: 10px 15px; /* Button padding */
      background-color: #007bff; /* Button color */
      color: white; /* Text color */
      border: none; /* Remove default border */
      border-radius: 5px; /* Rounded corners */
      cursor: pointer; /* Pointer on hover */
      width: 100%; /* Full width for button */
    }

    .btn:hover {
      background-color: #0056b3; /* Darker blue on hover */
    }

    a {
      color: #007bff; /* Link color */
      text-decoration: none; /* Remove underline */
    }

    a:hover {
      text-decoration: underline; /* Underline on hover */
    }

    .remember-me {
      margin-bottom: 15px; /* Space below checkbox */
      display: flex;
      align-items: center; /* Align checkbox and label */
    }
    
    input[type="checkbox"] {
      margin-right: 5px; /* Space between checkbox and label */
    }

    .remember-me label {
      margin-top: -8px; /* Move label 5 pixels up */
      font-weight: normal; /* Make font non-bold */
    }

    .remember-me label:hover {
      text-decoration: underline; /* Underline on hover */
    }
  </style>
</section>

<script>
  // Function to set a cookie
  function setCookie(cname, cvalue, exdays) {
    const d = new Date();
    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000)); 
    const expires = "expires=" + d.toUTCString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/"; 
  }

  // Function to get a cookie value
  function getCookie(cname) {
    const name = cname + "=";
    const decodedCookie = decodeURIComponent(document.cookie);
    const ca = decodedCookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) === 0) {
        return c.substring(name.length, c.length); 
      }
    }
    return ""; 
  }

  const loginForm = document.getElementById('customer_login');

  document.addEventListener('DOMContentLoaded', function() {
    // Hide the recover customer password form on page load
    var recoverForm = document.querySelector('form[action="/account/recover"]');
    if (recoverForm) {
       recoverForm.style.display = 'none';
    }

    // Check for the remember me cookie and set the email field if it exists
    const storedEmail = getCookie("rememberedEmail");
    if (storedEmail) {
      document.querySelector('input[name="customer[email]"]').value = storedEmail; 
    }

    // Handle form submission
    loginForm.addEventListener('submit', function(event) {
      const rememberMeCheckbox = document.getElementById('remember-me');
      const emailField = document.querySelector('input[name="customer[email]"]');

      if (rememberMeCheckbox.checked) {
        setCookie("rememberedEmail", emailField.value, 30); // Cookie expires in 30 days
      } else {
        setCookie("rememberedEmail", "", -1); // Delete the cookie if not checked
      }
    });

    function showResetPasswordForm() {
      loginForm.style.display = 'none';
      var recoverForm = document.querySelector('form[action="/account/recover"]');
      if (recoverForm) {
          recoverForm.style.display = 'block';
      }
    }

    document.getElementById('recover-password').addEventListener('click', showResetPasswordForm);
  });
</script>

{% schema %}
  {
    "name": "Login"
  }
{% endschema %}