<div class="auction-details-container">
  <h1 id="auction-title">Loading...</h1>
   <p><strong>Time Remaining:</strong> <span id="countdown-timer">Loading...</span></p>
  <img id="auction-image" class="auction-image" alt="Auction Image">
  <div class="bid-section">
    <label for="bid-input"><strong>Place Your Bid:</strong></label>
    <input type="number" id="bid-input" min="0" step="100">
    <button id="submit-bid">Submit Bid</button>
     <div id="response-message"></div>
  </div>
  <p><strong>Start Price:</strong> <span id="start-price"></span></p>
  <p><strong>Current Price:</strong> <span id="current-price"></span></p>
  <p><strong>Start Date:</strong> <span id="start-date"></span></p>
  <p><strong>End Date:</strong> <span id="end-date"></span></p>
 
</div>
<script>
    window.customerEmail = "{{ customer.email | escape }}";
</script>
<script type='text/javascript' src='https://cdn.jsdelivr.net/npm/emailjs-com@3/dist/email.min.js'></script>
<script type='text/javascript'>
   (function(){
      emailjs.init('UW-9aMs2LssiFTzga');
   })();
</script>

<script>
  const customerEmail = window.customerEmail || null;
  let bids = [];
  let auctionOwner;
  document.addEventListener("DOMContentLoaded", async () => {
  const auctionId = new URLSearchParams(window.location.search).get("auctionId");
  const auctionApiUrl = `https://shopifyauctionapp-hrdhadb3f3f5gpdh.northeurope-01.azurewebsites.net/Auctions/${auctionId}`;
  const auctionTitle = document.getElementById("auction-title");
  const auctionImage = document.getElementById("auction-image");
  const startPrice = document.getElementById("start-price");
  const currentPrice = document.getElementById("current-price");
  const startDate = document.getElementById("start-date");
  const endDate = document.getElementById("end-date");
  const bidInput = document.getElementById("bid-input");
  const submitBidButton = document.getElementById("submit-bid");
  const responseMessage = document.getElementById("response-message");
  const countdownTimer = document.getElementById("countdown-timer");

  try {
    const response = await fetch(auctionApiUrl, {
    method: "GET",
    headers: {
    "Content-Type": "application/json",
    "x-token": "7ca2bd89bc8b479f8e4a08dd14434a81" 
  }
});
    
    if (!response.ok) throw new Error("Failed to fetch auction details.");
    const auction = await response.json();

    auctionOwner = auction.customerId;
   

    
     bids = auction.bids || [];
    
    auctionTitle.textContent = auction.productTitle;
    auctionImage.src = auction.imgUrlProduct;
    startPrice.textContent = `RSD ${auction.startPrice}`;
    currentPrice.textContent = `RSD ${auction.currentPrice}`;
    startDate.textContent = new Date(auction.startDate).toISOString().replace('T', ' ').replace('.000Z', '');
    endDate.textContent = new Date(auction.endDate).toISOString().replace('T', ' ').replace('.000Z', '');

   
    bids = auction.bids || [];
   
    if (bids.length > 0) {
      const lastBid = bids[bids.length - 1];
     
    }

    
    const endDateTime = new Date(new Date(auction.endDate).getTime() - 3600000).getTime();
    function updateCountdown() {
      const now = new Date().getTime();
      const timeRemaining = endDateTime - now;

      if (timeRemaining <= 0) {
        countdownTimer.textContent = "Auction Ended";
        clearInterval(countdownInterval);

        
        submitBidButton.disabled = true;
        submitBidButton.style.opacity = 0.5;
        bidInput.disabled = true;
        bidInput.style.opacity = 0.5;

       
        if (bids.length > 0) {
        const lastBid = bids[bids.length - 1];
        const customerId = lastBid.customerId || "Unknown"; 

        const congratulationsMessage = document.createElement("p");
        congratulationsMessage.textContent = `Congratulations ${customerId}!`; 
        congratulationsMessage.className = "congratulations-message";
        submitBidButton.parentElement.appendChild(congratulationsMessage);
        sendWinnerEmail(customerId, auctionTitle, lastBid);
        }

        return;
      }
      
      const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
      const hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);

      countdownTimer.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;
    }

    const countdownInterval = setInterval(updateCountdown, 1000);
    updateCountdown();

      if (customerEmail === auctionOwner) {
      bidInput.disabled = true;
      submitBidButton.disabled = true;
      bidInput.style.opacity = 0.5;
      submitBidButton.style.opacity = 0.5;

      
      const ownerMessage = document.createElement("p");
      ownerMessage.textContent = "You are the owner of this auction. Bidding is disabled.";
      ownerMessage.className = "info-message";
      ownerMessage.style.color = "red"; 
      ownerMessage.style.fontWeight = "bold";
      ownerMessage.style.marginTop = "10px";
      submitBidButton.parentElement.appendChild(ownerMessage);

      return;
    }

  } catch (error) {
    console.error("Error fetching auction details:", error);
    responseMessage.textContent = "Error loading auction details.";
  }
  function sendWinnerEmail(customerId, auctionTitleElement, lastBid) {
    const emailParams = {
      to_email: customerId,
      auction_title: auctionTitleElement.textContent,
      winning_bid: `RSD ${lastBid.price}`,
    };
  
    emailjs.send('shopify_learning@outlook', 'template_kqb8a9o', emailParams)
      .then(() => {
        
      })
      .catch((error) => {
        console.error('Error sending email:', error);
      });
  }
    function notifyOutbidder(outbidderEmail, auctionTitleElement, previousBid) {
    const emailParams = {
        to_email: outbidderEmail,
        auction_title: auctionTitleElement.textContent,
        outbid_price: `RSD ${previousBid}`,
    };

    emailjs.send('shopify_learning@outlook', 'template_g9irw73', emailParams)
        .then(() => {
            
        })
        .catch((error) => {
            console.error('Error sending outbid notification email:', error);
        });
}

    
  submitBidButton.addEventListener("click", async () => {
    const price = parseFloat(bidInput.value);
    if (!price || price <= 0) {
      responseMessage.textContent = "Please enter a valid bid.";
      responseMessage.className = "error-message";
      responseMessage.style.display = "block";
      return;
    }
    if (price <= parseFloat(currentPrice.textContent.replace('RSD ', '').replace(',', ''))) {
      responseMessage.textContent = "Your bid must be higher than the current price.";
      responseMessage.className = "error-message";
      responseMessage.style.display = "block";
      return;
    }

     if (bids.length > 0) {
    const lastBid = bids[bids.length - 1];
    if (lastBid.customerId === customerEmail) {
      responseMessage.textContent = "You cannot place consecutive bids. Please wait for someone else to bid.";
      responseMessage.className = "error-message";
      responseMessage.style.display = "block";
      return;
    }
  }
 
    submitBidButton.disabled = true;
    submitBidButton.style.opacity = 0.5;
    bidInput.disabled = true;
    bidInput.style.opacity = 0.5;

    try {
      const auctionIdAsInt = parseInt(auctionId, 10);
      const previousBidder = bids.length > 0 ? bids[bids.length - 1] : null;
      
      const bidPayload = {
        customerId: String(customerEmail),
        auctionId: auctionIdAsInt,
        price: price,
      };

      const bidApiUrl = "https://shopifyauctionapp-hrdhadb3f3f5gpdh.northeurope-01.azurewebsites.net/Bids";

      const response = await fetch(bidApiUrl, {
       method: "POST",
       headers: {
       "Content-Type": "application/json",
       "x-token": "7ca2bd89bc8b479f8e4a08dd14434a81"
      },
          body: JSON.stringify(bidPayload)
         });

      if (!response.ok) throw new Error("Failed to submit bid.");

      responseMessage.textContent = "Your bid has been successfully placed!";
      responseMessage.className = "success-message";
      responseMessage.style.display = "block";

      const updatedAuction = await response.json();
      bids = updatedAuction.bids || [];
      currentPrice.textContent = `RSD ${updatedAuction.currentPrice}`;

      if (previousBidder) {
            notifyOutbidder(previousBidder.customerId, auctionTitle, previousBidder.price);
        }
      
      setTimeout(() => {
        responseMessage.style.display = "none";
        bidInput.value = "";
        submitBidButton.disabled = false;
        submitBidButton.style.opacity = 1;
        bidInput.disabled = false;
        bidInput.style.opacity = 1;
      }, 2000);

    } catch (error) {
      console.error("Error submitting bid:", error);
      responseMessage.textContent = "Failed to place bid. Please try again.";
      responseMessage.className = "error-message";
      responseMessage.style.display = "block";

      submitBidButton.disabled = false;
      submitBidButton.style.opacity = 1;
      bidInput.disabled = false;
      bidInput.style.opacity = 1;
    }
  });
});

</script>
