<div class="auction-details-container">
  <h1 id="auction-title">Loading...</h1>
  <div class="auction-content">
    <div class="auction-image-container">
      <div class="image-gallery">
        <img id="auction-image" class="auction-image" alt="Auction Image">
      </div>
      <div class="image-thumbnails">
        <img class="thumbnail" src="" alt="Thumbnail" data-index="0">
      </div>
    </div>
    <div class="auction-info">
      <p id="auction-description">Loading description...</p>
      <div class="bid-section">
        <label for="bid-input"><strong>Place Your Bid:</strong></label>
        <input type="number" id="bid-input" min="0" step="100">
        <button id="submit-bid">Submit Bid</button>
        <div id="response-message"></div>
      </div>
    </div>
  </div>

  <div class="auction-pricing">
    <p><strong>Start Price:</strong> <span id="start-price"></span></p>
    <p><strong>Current Price:</strong> <span id="current-price"></span></p>
    <p><strong>Start Date:</strong> <span id="start-date"></span></p>
    <p><strong>End Date:</strong> <span id="end-date"></span></p>
    <p id="countdown-timer"></p>
  </div>
</div>

<style>
.auction-details-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
  font-family: Arial, sans-serif;
  display: flex;
  flex-direction: column;
}

.auction-details-container h1 {
  font-size: 24px;
  margin-bottom: 15px;
  color: #333;
}

.auction-content {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

.auction-image-container {
   display: flex;
  flex-direction: column;
  align-items: center;
}

.image-gallery {
  position: relative;
  max-width: 100%;
  width: 100%;
  height: 400px;
  overflow: hidden;
}

.auction-image {
  width: 100%;
  height: 100%;
  object-fit: contain;
  border-radius: 5px;
  transition: all 0.3s ease;
}

  .image-thumbnails {
  display: flex;
  margin-top: 10px;
  justify-content: center;
}

.thumbnail {
  width: 60px;
  height: 60px;
  margin: 0 5px;
  object-fit: cover;
  cursor: pointer;
  border-radius: 5px;
  opacity: 0.7;
  transition: opacity 0.3s;
}

.thumbnail:hover {
  opacity: 1;
}
  
.auction-info {
  width: 50%;
   flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.auction-info p {
  margin-bottom: 15px;
}

.auction-info .bid-section {
  margin-top: 20px;
}

.auction-info .bid-section label {
  display: block;
  font-weight: bold;
  margin-bottom: 8px;
}

.auction-info .bid-section input[type="number"] {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
  box-sizing: border-box;
}

.auction-info .bid-section button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #45a049;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  width: 100%;
  margin-bottom: 10px;
}

.auction-info .bid-section button:hover {
  background-color: #4CAF50;
}

/* Pricing Section */
.auction-pricing {
  width: 100%;
  margin-top: 20px;
}

.auction-pricing p {
  margin-bottom: 10px;
  font-size: 16px;
  color: #555;
}

#countdown-timer {
  font-size: 16px;
  font-weight: bold;
  color: #d9534f;
}
</style>

<script>
    window.customerEmail = "{{ customer.email | escape }}";
</script>
<script type='text/javascript' src='https://cdn.jsdelivr.net/npm/emailjs-com@3/dist/email.min.js'></script>
<script type='text/javascript'>
   (function(){
      emailjs.init('UW-9aMs2LssiFTzga');
   })();
</script>

<script>
  const customerEmail = window.customerEmail || null;
  let bids = [];
  let auctionOwner;
  document.addEventListener("DOMContentLoaded", async () => {
    const auctionId = new URLSearchParams(window.location.search).get("auctionId");
    const auctionApiUrl = `https://shopifyauctionapp-hrdhadb3f3f5gpdh.northeurope-01.azurewebsites.net/Auctions/${auctionId}`;
    const auctionTitle = document.getElementById("auction-title");
    const auctionImage = document.getElementById("auction-image");
    const auctionDescription = document.getElementById("auction-description")
    const startPrice = document.getElementById("start-price");
    const currentPrice = document.getElementById("current-price");
    const startDate = document.getElementById("start-date");
    const endDate = document.getElementById("end-date");
    const bidInput = document.getElementById("bid-input");
    const submitBidButton = document.getElementById("submit-bid");
    const responseMessage = document.getElementById("response-message");
    const countdownTimer = document.getElementById("countdown-timer");

    try {
      const response = await fetch(auctionApiUrl, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "x-token": "7ca2bd89bc8b479f8e4a08dd14434a81" 
        }
      });

      if (!response.ok) throw new Error("Failed to fetch auction details.");
      const auction = await response.json();

      const graphQlUrl = 'https://levi9-test.myshopify.com/admin/api/2024-04/graphql.json';
      const accessToken = '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';

      const productId = auction.productId;

      const query = `
  query {
    product(id: "gid://shopify/Product/${productId}") {
      id
      title
      images(first: 5) {
        edges {
          node {
            src
            altText
          }
        }
      }
    }
  }
`;
      const fetchImages = async () => {
  try {
    const response = await fetch(graphQlUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': accessToken,
      },
      body: JSON.stringify({ query }),
    });

    const data = await response.json();
    if (data.errors) {
      console.error("GraphQL Error:", data.errors);
      return;
    }

    const product = data.data.product;
    const images = product.images.edges.map(edge => edge.node.src);

    const auctionImage = document.getElementById("auction-image");
    auctionImage.src = images[0];

    const thumbnailContainer = document.querySelector(".image-thumbnails");
    thumbnailContainer.innerHTML = ''; 

    images.forEach((imageSrc, index) => {
      const thumbnail = document.createElement("img");
      thumbnail.src = imageSrc;
      thumbnail.alt = `Thumbnail ${index + 1}`;
      thumbnail.classList.add("thumbnail");
      thumbnail.dataset.index = index;

      thumbnail.addEventListener('click', () => {
        auctionImage.src = imageSrc;
      });

      thumbnailContainer.appendChild(thumbnail);
    });
      
  } catch (error) {
    console.error("Error fetching product images:", error);
  }
};

fetchImages();
     
      
      auctionOwner = auction.customerId;
      bids = auction.bids || [];

      auctionTitle.textContent = auction.productTitle;
      auctionImage.src = auction.imgUrlProduct;
      auctionDescription.textContent = auction.description || "No description available.";
      startPrice.textContent = `RSD ${auction.startPrice}`;
      currentPrice.textContent = `RSD ${auction.currentPrice}`;
      startDate.textContent = new Date(auction.startDate).toISOString().replace('T', ' ').replace('.000Z', '');
      endDate.textContent = new Date(auction.endDate).toISOString().replace('T', ' ').replace('.000Z', '');


     
      
      const descriptionLength = auctionDescription.textContent.length;
      if (descriptionLength > 300) {
        auctionImage.style.maxWidth = '500px'; // Increase image size if description is long
      } else {
        auctionImage.style.maxWidth = '350px'; 
      }

      bids = auction.bids || [];

      const endDateTime = new Date(new Date(auction.endDate).getTime() - 3600000).getTime();

      function updateCountdown() {
        const now = new Date().getTime();
        const timeRemaining = endDateTime - now;

        if (timeRemaining <= 0) {
          countdownTimer.textContent = "Auction Ended";
          clearInterval(countdownInterval);

          submitBidButton.disabled = true;
          submitBidButton.style.opacity = 0.5;
          bidInput.disabled = true;
          bidInput.style.opacity = 0.5;

          if (bids.length > 0) {
            const lastBid = bids[bids.length - 1];
            const customerId = lastBid.customerId || "Unknown"; 

            const congratulationsMessage = document.createElement("p");
            congratulationsMessage.textContent = `Congratulations ${customerId}!`; 
            congratulationsMessage.className = "congratulations-message";
            submitBidButton.parentElement.appendChild(congratulationsMessage);
            sendWinnerEmail(customerId, auctionTitle, lastBid);
          }

          return;
        }

        const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);

        countdownTimer.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;
      }

      const countdownInterval = setInterval(updateCountdown, 1000);
      updateCountdown();

      if (customerEmail === auctionOwner) {
        bidInput.disabled = true;
        submitBidButton.disabled = true;
        bidInput.style.opacity = 0.5;
        submitBidButton.style.opacity = 0.5;

        const ownerMessage = document.createElement("p");
        ownerMessage.textContent = "You are the owner of this auction. Bidding is disabled.";
        ownerMessage.className = "info-message";
        ownerMessage.style.color = "red"; 
        ownerMessage.style.fontWeight = "bold";
        ownerMessage.style.marginTop = "10px";
        submitBidButton.parentElement.appendChild(ownerMessage);

        return;
      }

    } catch (error) {
      console.error("Error fetching auction details:", error);
      responseMessage.textContent = "Error loading auction details.";
    }

    function sendWinnerEmail(customerId, auctionTitleElement, lastBid) {
      const emailParams = {
        to_email: customerId,
        auction_title: auctionTitleElement.textContent,
        winning_bid: `RSD ${lastBid.price}`,
      };

      emailjs.send('shopify_learning@outlook', 'template_kqb8a9o', emailParams)
        .then(() => {})
        .catch((error) => {
          console.error('Error sending email:', error);
        });
    }

    submitBidButton.addEventListener("click", async () => {
      const price = parseFloat(bidInput.value);
      if (!price || price <= 0) {
        responseMessage.textContent = "Please enter a valid bid.";
        responseMessage.className = "error-message";
        responseMessage.style.display = "block";
        return;
      }
      if (price <= parseFloat(currentPrice.textContent.replace('RSD ', '').replace(',', ''))) {
        responseMessage.textContent = "Your bid must be higher than the current price.";
        responseMessage.className = "error-message";
        responseMessage.style.display = "block";
        return;
      }

      if (bids.length > 0) {
        const lastBid = bids[bids.length - 1];
        if (lastBid.customerId === customerEmail) {
          responseMessage.textContent = "You cannot place consecutive bids. Please wait for someone else to bid.";
          responseMessage.className = "error-message";
          responseMessage.style.display = "block";
          return;
        }
      }

      submitBidButton.disabled = true;
      submitBidButton.style.opacity = 0.5;
      bidInput.disabled = true;
      bidInput.style.opacity = 0.5;

      try {
        const auctionIdAsInt = parseInt(auctionId, 10);
        const previousBidder = bids.length > 0 ? bids[bids.length - 1] : null;

        const bidPayload = {
          customerId: String(customerEmail),
          auctionId: auctionIdAsInt,
          price: price,
        };

        const bidApiUrl = "https://shopifyauctionapp-hrdhadb3f3f5gpdh.northeurope-01.azurewebsites.net/Bids";

        const response = await fetch(bidApiUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "x-token": "7ca2bd89bc8b479f8e4a08dd14434a81"
          },
          body: JSON.stringify(bidPayload)
        });

        if (!response.ok) throw new Error("Failed to submit bid.");

        responseMessage.textContent = "Your bid has been successfully placed!";
        responseMessage.className = "success-message";
        responseMessage.style.display = "block";

        const updatedAuction = await response.json();
        bids = updatedAuction.bids || [];
        currentPrice.textContent = `RSD ${updatedAuction.currentPrice}`;

        if (previousBidder) {
          notifyOutbidder(previousBidder.customerId, auctionTitle, previousBidder.price);
        }

        setTimeout(() => {
          responseMessage.style.display = "none";
          bidInput.value = "";
          submitBidButton.disabled = false;
          submitBidButton.style.opacity = 1;
          bidInput.disabled = false;
          bidInput.style.opacity = 1;
        }, 2000);

      } catch (error) {
        console.error("Error submitting bid:", error);
        responseMessage.textContent = "Failed to place bid. Please try again.";
        responseMessage.className = "error-message";
        responseMessage.style.display = "block";

        submitBidButton.disabled = false;
        submitBidButton.style.opacity = 1;
        bidInput.disabled = false;
        bidInput.style.opacity = 1;
      }
    });
  });
</script>
